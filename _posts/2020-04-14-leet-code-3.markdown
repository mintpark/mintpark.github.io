---
layout: post
title:  "move elements"
categories: coding test
---
---
Input: [0,1,0,3,12]
Output: [1,3,12,0,0]
Requires: in-place, no extra memory, but flag is accepted
---
Leet Code 30-day challenge: day 4

> O(n)
<pre> 
<code>
func moveZeroes(_ nums: inout [Int]) {
    var lastIndex = 0
    (0..<nums.count).forEach { (i) in
        if nums[i] == 0 { return }
        nums.insert(nums[i], at: lastIndex)
        nums.remove(at: i+1)
        // ** leetCode compiler가 fromOffsets를 인지못함
        // nums.move(fromOffsets: .init(integer: i), toOffset: lastIndex)
        lastIndex += 1
    }
}
</code> 
</pre>

// test case
var a = [0,1,0,3,12]
var b = [1,2,3,4,5]
var c = [0,0,1,2,3]
var d = [1,0,0,0,2,3]
var e = [1,2,3,0,0]

// debugging
//[0,1,0,3,12] // == i, lastIndex
//[1,0,0,3,12] // << 1, 0
//[1,3,0,0,12] // << 3, 1
//[1,3,0,12,0] // << 4, 3
>>  last index should be added by 1, not i

> fail logic
func moveZeroes(_ nums: inout [Int]) {
    (0..<nums.count).forEach { (i) in
        // 0이 연속으로 있는 경우는 2번째거 인지못함
        nums.move(fromOffsets: .init(integer: i), toOffset: nums.count)
    }
}
