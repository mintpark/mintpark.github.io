---
layout: post
title:  "max subarray"
categories: coding test
---
---
Input: [-2,1,-3,4,-1,2,1,-5,4]
Output:  6
Explanation: [4,-1,2,1] has the largest sum = 6.
---
Leet Code 30-day challenge: day 3

> O(n)
<pre> 
<code>
func maxSubArray(_ nums: [Int]) -> Int {
    var currSum = 0
    var maxSum = nums[0]

    (0...(nums.count-1)).forEach { (n) in
        currSum = max(0, currSum)
        currSum += nums[n]
        maxSum = max(maxSum, currSum)
    }
    return maxSum
}
</code> 
</pre>


> O(n^2)
>> time limit exceed....
<pre> 
<code>
class Solution {
    func maxSubArray(_ nums: [Int]) -> Int {
        var max = nums[0]

        (0...(nums.count-1)).forEach { (n) in
            (0...n).forEach({ (m) in
            let sum = nums[m...n].reduce(0, +)
                if sum > max {
                    max = sum
                    }
                })
            }
        return max
    }
}
</code> 
</pre>
